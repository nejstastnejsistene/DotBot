point = lambda r, c: 6*c+r
def print_masks(mask, n):
    for c in range(n):
        for r in range(n):
            print '    ' + hex(mask << point(r, c)) + 'ULL,'

print '/* Autogenerated by', __file__, '*/'
print
print '#include "DotBot.h"'
print
print '#define HAS_CYCLE(cycle, mask) (((cycle) & (mask)) == (cycle))'
print
print '#define NUM_CYCLES_0 25'
print '#define NUM_CYCLES_1 16'
print '#define NUM_CYCLES_2 18'
print '#define NUM_CYCLES_3 36'
print '#define NUM_CYCLES_4 9'
print
print 'mask_t cycles0[NUM_CYCLES_0] = {'

mask = 0b11 |  (0b11 << 6)
print_masks(mask, 5)

print '};'
print
print 'mask_t cycles1[NUM_CYCLES_1] = {'

mask = 0b111 | (0b101 << 6) | (0b111 << 12)
print_masks(mask, 4)


print '};'
print
print 'mask_t cycles2[NUM_CYCLES_2] = {'

mask = 0b1110 | (0b1011 << 6) | (0b1101 << 12) | (0b0111 << 18)
print_masks(mask, 3)

mask = 0b0111 | (0b1101 << 6) | (0b1011 << 12) | (0b1110 << 18)
print_masks(mask, 3)

print '};'
print
print 'mask_t cycles3[NUM_CYCLES_3] = {'

mask = 0b1110 | (0b1011 << 6) | (0b1001 << 12) | (0b1111 << 18)
print_masks(mask, 3)

mask = 0b0111 | (0b1101 << 6) | (0b1001 << 12) | (0b1111 << 18)
print_masks(mask, 3)

mask = 0b1111 | (0b1001 << 6) | (0b1011 << 12) | (0b1110 << 18)
print_masks(mask, 3)

mask = 0b1111 | (0b1001 << 6) | (0b1101 << 12) | (0b0111 << 18)
print_masks(mask, 3)

print '};'
print
print 'mask_t cycles4[NUM_CYCLES_4] = {'

mask = 0b1111 | (0b1001 << 6) | (0b1001 << 12) | (0b1111 << 18)
for c in range(3):
    for r in range(3):
        print '    ' + hex(mask << point(r, c)) + ','

print '};'
