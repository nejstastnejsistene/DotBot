$dot-width: 6%;
$path-width: $dot-width / 7;

$border-width: 100% / 36;

$falling-dots-duration: 0.25s;
$falling-dots-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);

$path-segment-duration: 0.1s;

$selecting-duration: 0.5s;
$selecting-scale-factor: 3;

$shrinking-duration: 0.25s;

$red: #eb5d49;
$light-red: #f4aea6;

$yellow: #e6da24;
$light-yellow: #f2ec94;

$green: #8ae892;
$light-green: #c6f3c8;

$blue: #8bbcff;
$light-blue: #c6ddff;

$violet: #985db7;
$light-violet: #cdaeda;

$vendors: 'webkit';

@mixin vendor-prefix($property, $value) {
    @each $vendor in $vendors {
        -#{$vendor}-#{$property}: #{$value};
    }
    #{$property}: #{$value};
}

@mixin keyframes($animation-name) {
    @each $vendor in $vendors {
        @content;
    }
    @keyframes $animation-name {
        @content;
    }
}

@function offset($i) {
    @return ($i + 1) / 7 * 100%;
}

#dots {
    width: 800px;
    height: 800px;
    position: relative;

    [data-color=red]    { background: $red }
    [data-color=yellow] { background: $yellow }
    [data-color=green]  { background: $green }
    [data-color=blue]   { background: $blue }
    [data-color=violet] { background: $violet }

    .grid {
        position: absolute;
        margin: $border-width $border-width $border-width $border-width;
        width: 100% - 2 * $border-width;
        height: 100% - 2 * $border-width;
        background: white;

        &[data-color=red]    { background: $light-red }
        &[data-color=yellow] { background: $light-yellow }
        &[data-color=green]  { background: $light-green }
        &[data-color=blue]   { background: $light-blue }
        &[data-color=violet] { background: $light-violet }
    }

    .border {
        position: absolute;
        &.bottom { bottom: 0 }

        @for $n from 1 through 7 {
            &[data-num-dots="#{$n}"] {
                $width: $border-width * $n * ($n + 1) / 2;
                margin-left: 50% - $width / 2;
                width: $width;
                height: $border-width;
            }
        }
        @for $n from 8 through 14 {
            &[data-num-dots="#{$n}"] {
                $height: $border-width * ($n - 7) * ($n - 6) / 4;
                width: 100%;
                height: $border-width + $height;
            }
        }
        &[data-num-dots=all] {
            width: 100%;
            height: 50%;
        }
    }

    .dot {
        border-radius: 50%;
        width: $dot-width;
        height: $dot-width;
        position: absolute;

        @include vendor-prefix(transition, top $falling-dots-duration $falling-dots-timing-function);
        
        @for $i from 0 through 5 {
            $offset: offset($i) - $dot-width/2;
            &[data-col="#{$i}"] { left: $offset }
            &[data-row="#{$i}"] { top:  $offset }
        }

        &.falling {
            @include vendor-prefix(animation, falling $falling-dots-duration $falling-dots-timing-function forwards);
        }

        &.selecting {
            @include vendor-prefix(animation, selecting $selecting-duration linear forwards);
        }

        &.shrinking {
            @include vendor-prefix(animation, shrinking $shrinking-duration linear forwards);
        }
    }

    .path-segment {
        position: absolute;

        @include vendor-prefix(animation-duration, $path-segment-duration);
        @include vendor-prefix(animation-timing-function, linear);
        @include vendor-prefix(animation-fill-mode, forwards);

        @for $r from 0 through 5 {
            @for $c from 0 through 5 {
                $left: offset($c) - $path-width/2;
                $top:  offset($r) - $path-width/2;
                $near-right:  100% - offset($c)   - $path-width/2;
                $far-right:   100% - offset($c+1) - $path-width/2;
                $near-bottom: 100% - offset($r)   - $path-width/2;
                $far-bottom:  100% - offset($r+1) - $path-width/2;

                // vertically between r and r+1
                @if $r < 5 {
                    // top to bottom
                    &.from-#{$r}-#{$c}-to-#{$r+1}-#{$c} {
                        left:   $left;
                        top:    $top;
                        right:  $near-right;
                        @include vendor-prefix(animation-name, from-#{$r}-#{$c}-to-#{$r+1}-#{$c});
                    }
                    // bottom to top
                    &.from-#{$r+1}-#{$c}-to-#{$r}-#{$c} {
                        left:   $left;
                        right:  $near-right;
                        bottom: $far-bottom;
                        @include vendor-prefix(animation-name, from-#{$r+1}-#{$c}-to-#{$r}-#{$c});
                    }
                }
                // Horizontally, between c and c+1
                @if $c < 5 {
                    // left to right
                    &.from-#{$r}-#{$c}-to-#{$r}-#{$c+1} {
                        left:   $left;
                        top:    $top;
                        bottom: $near-bottom;
                        @include vendor-prefix(animation-name, from-#{$r}-#{$c}-to-#{$r}-#{$c+1});
                    }
                    // right to left
                    &.from-#{$r}-#{$c+1}-to-#{$r}-#{$c} {
                        top:    $top;
                        right:  $far-right;
                        bottom: $near-bottom;
                        @include vendor-prefix(animation-name, from-#{$r}-#{$c+1}-to-#{$r}-#{$c});
                    }
                }
            }
        }
    }
}

@include keyframes(falling) {
    from {
        top: 0;
    }
}

@include keyframes(selecting) {
    to {
        transform: scale($selecting-scale-factor);
        opacity: 0;
    }
}

@include keyframes(shrinking) {
    to { transform: scale(0) }
}

@for $r from 0 through 5 {
    @for $c from 0 through 5 {
        $left:   offset($c) - $path-width/2;
        $top:    offset($r) - $path-width/2;
        $right:  offset($c+1) - $path-width/2;
        $bottom: offset($r+1) - $path-width/2;
        @if $r < 5 {
            @include keyframes(from-#{$r}-#{$c}-to-#{$r+1}-#{$c}) {
                from { bottom: 100% - $top }
                to   { bottom: 100% - $bottom }
            }
            @include keyframes(from-#{$r+1}-#{$c}-to-#{$r}-#{$c}) {
                from { top: $bottom }
                to   { top: $top }
            }
        }
        @if $c < 5 {
            @include keyframes(from-#{$r}-#{$c}-to-#{$r}-#{$c+1}) {
                from { right: 100% - $left }
                to   { right: 100% - $right }
            }
            @include keyframes(from-#{$r}-#{$c+1}-to-#{$r}-#{$c}) {
                from { left: $right }
                to   { left: $left }
            }
        }
    }
}
